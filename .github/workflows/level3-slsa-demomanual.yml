# Name of this GitHub Actions workflow.
name: Slsa demo manual

on:
  workflow_dispatch:
env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # This step builds our image, pushes it, and outputs the repo hash digest.
  build:
    name: build
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: [self-hosted, linux, slsa2]
    steps:
      # - name: Checkout the repository
      #   uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        
      # - name: Sleep for 30 seconds
      #   run: sleep 30s
      #   shell: bash

      - name: Authenticate Docker
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # v4.0.1
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          
      - name: Build and push Docker image
        id: build
        run: |
          docker buildx build --provenance=true -t ghcr.io/zadeeknss/slsa-demo:main --push . 
          echo "digest=SHA256:zadeekummer" >> $GITHUB_OUTPUT
          echo "digest=SHA256:zadeekummer" >> $GITHUB_STATE
      

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"


  # # This step calls the container workflow to generate provenance and push it to
  # # the container registry.
  # provenance:
  #   needs: [build]
  #   permissions:
  #     actions: read # for detecting the Github Actions environment.
  #     id-token: write # for creating OIDC tokens for signing.
  #     packages: write # for uploading attestations.
  #   # if: startsWith(github.ref, 'refs/tags/')
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
  #   with:
  #     image: ${{ needs.build.outputs.image }}
  #     digest: ${{ needs.build.outputs.digest }}
  #     registry-username: ${{ github.actor }}
  #   secrets:
  #     registry-password: ${{ secrets.GITHUB_TOKEN }}



  verification:
    needs: [ build]
    runs-on: [self-hosted, linux, slsa2]
    # if: github.event_name != 'schedule' && github.event_name != 'workflow_dispatch'
    permissions: read-all
    steps:
      - name: Authenticate Docker
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # - name: Install the verifier
      #   uses: sigstore/cosign-installer@v3.1.1
      #   with:
      #     cosign-release: 'v2.1.1' # optional

      # - name: Verify assets
      #   env:
      #     DIGEST: ${{ needs.build.outputs.digest }}
      #   run: |
      #     set -euo pipefail
      #      COSIGN_EXPERIMENTAL=1 cosign verify-attestation --type=slsaprovenance --certificate-oidc-issuer https://token.actions.githubusercontent.com   --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$'   ${{ env.IMAGE_REGISTRY }}/${{github.repository}}@${{ needs.build.outputs.digest }}
      - name: run images
        run: |
          docker stop slsademo
          docker rm slsademo
          docker run -d --name slsademo -p 80:8080  ghcr.io/zadeeknss/slsa-demo:main
