# Name of this GitHub Actions workflow.
name: Slsa demo - slsa generator

on:
  workflow_dispatch:
env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # This step builds our image, pushes it, and outputs the repo hash digest.
  build:
    name: build
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.9.1

      - name: Authenticate Docker
        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # v4.0.1
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
        id: build
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"

  # This step calls the container workflow to generate provenance and push it to
  # the container registry.
  provenance:
    needs: [build]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    # if: startsWith(github.ref, 'refs/tags/')
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ${{ needs.build.outputs.image }}
      digest: ${{ needs.build.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}



  verification-on-prod:
    needs: [provenance]
    runs-on: [self-hosted, linux, slsa]
    # if: github.event_name != 'schedule' && github.event_name != 'workflow_dispatch'
    permissions: read-all
    steps:
      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.3.0

      # - name: Download assets
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ATT_FILE_NAME: "${{ needs.builder.outputs.go-binary-name }}.intoto.jsonl"
      #     ARTIFACT: ${{ needs.builder.outputs.go-binary-name }}
      #   run: |
      #     set -euo pipefail

      #     gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p $ARTIFACT
      #     gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$ATT_FILE_NAME"

      - name: Verify assets
        env:
          DIGEST: ${{ needs.build.outputs.digest }}
        run: |
          set -euo pipefail

          echo "Verifying $ARTIFACT using $ATT_FILE_NAME"
          slsa-verifier verify-image ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.digest }} /
                  --source-uri "github.com/$GITHUB_REPOSITORY"

  # if-succeed:
  #   needs: [args, builder]
  #   runs-on: ubuntu-latest
  #   # We use `== 'failure'` instead of ` != 'success'` because we want to ignore skipped jobs, if there are any.
  #   if: github.event_name == 'schedule' && needs.args.result != 'failure' && needs.builder.result != 'failure'
  #   permissions:
  #     contents: read
  #     issues: write
  #   steps:
  #     - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
  #       with:
  #         repository: slsa-framework/example-package
  #         ref: main
  #     - run: ./.github/workflows/scripts/e2e-report-success.sh

  # if-failed:
  #   needs: [args, builder]
  #   runs-on: ubuntu-latest
  #   if: always() && github.event_name == 'schedule' && (needs.args.result == 'failure' || needs.builder.result == 'failure')
  #   permissions:
  #     contents: read
  #     issues: write
  #   steps:
  #     - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
  #       with:
  #         repository: slsa-framework/example-package
  #         ref: main
  #     - run: ./.github/workflows/scripts/e2e-report-failure.sh
    
